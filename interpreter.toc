
(add-ns ev (module "eval.toc"))
(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "ff0ac6e"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "f308002"))
(add-ns sm (git-dependency "https://github.com/Toccata-Lang/state-maybe.git"
                           "state-maybe.toc"
                           :sha "e843c60"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "4b6a964"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "ed6281b"))

(def IntegerType (inline C Integer "(Value *)&(Integer){IntegerType, -1, IntegerType};"))
(def StringBufferType (inline C Integer "(Value *)&(Integer){IntegerType, -1, StringBufferType};"))
(def SubStringType (inline C Integer "(Value *)&(Integer){IntegerType, -1, SubStringType};"))
(def FnArityType (inline C Integer "(Value *)&(Integer){IntegerType, -1, FnArityType};"))
(def FunctionType (inline C Integer "(Value *)&(Integer){IntegerType, -1, FunctionType};"))
(def ListType (inline C Integer "(Value *)&(Integer){IntegerType, -1, ListType};"))
(def MaybeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, MaybeType};"))
(def VectorType (inline C Integer "(Value *)&(Integer){IntegerType, -1, VectorType};"))
(def VectorNodeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, VectorNodeType};"))
(def SymbolType (inline C Integer "(Value *)&(Integer){IntegerType, -1, SymbolType};"))
(def BitmapIndexedType (inline C Integer "(Value *)&(Integer){IntegerType, -1, BitmapIndexedType};"))
(def ArrayNodeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, ArrayNodeType};"))
(def HashCollisionNodeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, HashCollisionNodeType};"))
(def PromiseType (inline C Integer "(Value *)&(Integer){IntegerType, -1, PromiseType};"))
(def FutureType (inline C Integer "(Value *)&(Integer){IntegerType, -1, FutureType};"))
(def AgentType (inline C Integer "(Value *)&(Integer){IntegerType, -1, AgentType};"))
(def OpaqueType (inline C Integer "(Value *)&(Integer){IntegerType, -1, OpaqueType};"))

(deftype CompiledNs [ns-sym path syms protos]
  Stringable
  (string-list [_]
    (list "<CompiledNS " (str ns-sym) ">")))

;; TODO: this generates bad code
;; maybe
;; (defn interp-impl [impl-name impl-fn]
;;   (reify
;;     Stringable
;;     (string-list [_]
;;       (list (str impl-name)))

;;     Eq
;;     (=* [x y]
;;       (print-err 'WTF!!!)
;;       nothing)

;;     ev/Evaluator
;;     (ev/eval [x]
;;       (sm/state-maybe x))

;;     (ev/apply-fn [_ args]
;;       (print-err 'perhaps-here impl-name)
;;       (impl-fn args))))

(def interp-abort (ev/interp-impl 'interp-abort
                                  (constantly sm/zero-sm)))

(def interp-symbols {'Integer (ev/TypeMap {IntegerType #{}})
                     'StringBuffer (ev/TypeMap {StringBufferType #{}})
                     'SubString (ev/TypeMap {SubStringType #{}})
                     'FnArity (ev/TypeMap {FnArityType #{}})
                     'Fn (ev/TypeMap {FunctionType #{}})
                     'List (ev/TypeMap {ListType #{}})
                     'Maybe (ev/TypeMap {MaybeType #{}})
                     'Vector (ev/TypeMap {VectorType #{}})
                     'Symbol (ev/TypeMap {SymbolType #{}})
                     'BitmapIndexedNode (ev/TypeMap {BitmapIndexedType #{}})
                     'ArrayNode (ev/TypeMap {ArrayNodeType #{}})
                     'HashCollisionNode (ev/TypeMap {HashCollisionNodeType #{}})
                     'Promise (ev/TypeMap {PromiseType #{}})
                     'Future (ev/TypeMap {FutureType #{}})
                     'Agent (ev/TypeMap {AgentType #{}})
                     'Opaque (ev/TypeMap {OpaqueType #{}})
                     'abort interp-abort
                     'bpre print-err
                     'prefs prefs})

(defn proto-fn-names [protos]
  (flat-map (seq protos)
            (fn [[_ proto-fns]]
              (keys proto-fns))))

(defn create-proto-dispatchers [path syms protos]
  (reduce (flat-map (vals protos) seq) syms
          (fn [syms [proto-sym impls]]
            (assoc syms proto-sym impls))))

(defn make-compiled-ns [path syms protos import-paths]
  (assert (instance? String path))

  (ev/EvalNamespace path {}
                    (create-proto-dispatchers path syms protos)
                    import-paths [{}]))

(defn type-count []
  (inline C Integer "return(integerValue(typeCount));"))

(defn interp-file [script-file script-dir base-imports args]
  (ev/init ev/universal-proto-fn)
  (let [core-ns (make-compiled-ns "" (comp symbols interp-symbols) protocols {})
        import-paths (reduce base-imports {"" ""}
                             (fn [m import]
                               (assoc m (.path import) (ast/tag (.ns-sym import)))))
        base-imports (reduce base-imports {"" core-ns}
                             (fn [base-imports compiled]
                               (assert (instance? CompiledNs compiled))

                               (assoc base-imports
                                 (.ns-sym compiled) (make-compiled-ns (str (.ns-sym compiled))
                                                                      (.syms compiled)
                                                                      (.protos compiled)
                                                                      import-paths))))
        ns-state (-> base-imports
                     (vals)
                     (conj core-ns)
                     (reduce {} (fn [nss ns]
                                  (assoc nss (.path ns) ns))))
        base-syms (map-vals base-imports .syms)
        eval-state (-> ev/empty-state
                       (.ns ns-state)
                       (assoc-in [.ns script-file] (ev/EvalNamespace script-file base-syms {}
                                                                     import-paths [{}]))
                       (.base-imports base-syms)
                       (.type-count (type-count))
                       (.script-dir script-dir)
                       (.file-name script-file)
                       (.command-line (vec (cons script-file args))))]
    (for [file-in (fio/file-in script-file)
          [_ asts] (ev/parse {'file-name script-file
                              'line-number 1}
                             (lazy-list file-in))]
      (flat-map (flat-map ((ev/eval asts) eval-state)
                          first)
                last))))
