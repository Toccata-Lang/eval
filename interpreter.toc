
(add-ns ev (module "eval.toc"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "8e5fd43"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "83cc570"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "1653d24"))
(add-ns sys (git-dependency "https://github.com/Toccata-Lang/system.git"
                            "system.toc"
                            :sha "40c1c4d"))
(add-ns sm (git-dependency "https://github.com/Toccata-Lang/state-maybe.git"
                           "state-maybe.toc"
                           :sha "93614d5"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "e7a489b"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "41e5ca6"))

(def path-to-core (extract (or (map (sys/get-environment "TOCCATA_DIR")
                                    (fn [toc-dir]
                                      (str toc-dir "/core.toc")))
                               (do
                                 (print-err "Could not read environnment variable"
                                            "TOCCATA_DIR")
                                 (abort)))))

(def IntegerType (inline C Integer "(Value *)&(Integer){IntegerType, -1, IntegerType};"))
(def StringBufferType (inline C Integer "(Value *)&(Integer){IntegerType, -1, StringBufferType};"))
(def SubStringType (inline C Integer "(Value *)&(Integer){IntegerType, -1, SubStringType};"))
(def FnArityType (inline C Integer "(Value *)&(Integer){IntegerType, -1, FnArityType};"))
(def FunctionType (inline C Integer "(Value *)&(Integer){IntegerType, -1, FunctionType};"))
(def ListType (inline C Integer "(Value *)&(Integer){IntegerType, -1, ListType};"))
(def MaybeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, MaybeType};"))
(def VectorType (inline C Integer "(Value *)&(Integer){IntegerType, -1, VectorType};"))
(def VectorNodeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, VectorNodeType};"))
(def SymbolType (inline C Integer "(Value *)&(Integer){IntegerType, -1, SymbolType};"))
(def BitmapIndexedType (inline C Integer "(Value *)&(Integer){IntegerType, -1, BitmapIndexedType};"))
(def ArrayNodeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, ArrayNodeType};"))
(def HashCollisionNodeType (inline C Integer "(Value *)&(Integer){IntegerType, -1, HashCollisionNodeType};"))
(def PromiseType (inline C Integer "(Value *)&(Integer){IntegerType, -1, PromiseType};"))
(def FutureType (inline C Integer "(Value *)&(Integer){IntegerType, -1, FutureType};"))
(def AgentType (inline C Integer "(Value *)&(Integer){IntegerType, -1, AgentType};"))
(def OpaqueType (inline C Integer "(Value *)&(Integer){IntegerType, -1, OpaqueType};"))
(def CoreTypeCount (inline C Integer "(Value *)&(Integer){IntegerType, -1, TypeCount};"))

(def interp-list-map (reify
                       Stringable
                       (string-list [_]
                         (list "interp-list-map"))

                       Eq
                       (=* [x y]
                         nothing)

                       ev/Evaluator
                       (ev/eval* [x]
                         (sm/state-maybe x))

                       (ev/apply-fn [_ [l f]]
                         (assert (instance? List l))

                         (ev/traverse l (fn [x]
                                          (ev/apply-fn f (list x)))))))

(def interp-maybe-map (reify
                        Stringable
                        (string-list [_]
                          (list "interp-maybe-map"))

                        Eq
                        (=* [x y]
                          nothing)

                        ev/Evaluator
                        (ev/eval* [x]
                          (sm/state-maybe x))

                        (ev/apply-fn [_ [mv f]]
                          (either (map mv (fn [x]
                                            (map (ev/apply-fn f (list x))
                                                 maybe)))
                                  (sm/state-maybe nothing)))))

(def interp-abort (reify
                    Stringable
                    (string-list [_]
                      (list "interp-abort"))

                    Eq
                    (=* [x y]
                      nothing)

                    ev/Evaluator
                    (ev/eval* [x]
                      (zero sm/state-maybe))

                    (ev/apply-fn [x y]
                      (zero sm/state-maybe))))

(def interp-apply* (reify
                     Stringable
                     (string-list [_]
                       (list "interp-apply*"))

                     Eq
                     (=* [x y]
                       nothing)

                     ev/Evaluator
                     (ev/eval* [x]
                       (sm/state-maybe x))

                     (ev/apply-fn [_ [mf mvs]]
                       (ev/apply-fn mf mvs))))

(def interp-filter-list (reify
                          Stringable
                          (string-list [_]
                            (list "interp-filter-list"))

                          Eq
                          (=* [x y]
                            nothing)

                          ev/Evaluator
                          (ev/eval* [x]
                            (sm/state-maybe x))

                          (ev/apply-fn [_ [l f]]
                            (for [xs (ev/traverse l (fn [x]
                                                      (ev/apply-fn f (list x))))]
                              (seq (reduce xs []
                                           (fn [vect x]
                                             (either (map x (partial conj vect))
                                                     vect))))))))

(def interp-filter-vect (reify
                          Stringable
                          (string-list [_]
                            (list "interp-filter-vect"))

                          Eq
                          (=* [x y]
                            nothing)

                          ev/Evaluator
                          (ev/eval* [x]
                            (sm/state-maybe x))

                          (ev/apply-fn [_ [l f]]
                            (for [xs (ev/traverse l (fn [x]
                                                      (ev/apply-fn f (list x))))]
                              (reduce xs []
                                      (fn [vect x]
                                        (either (map x (partial conj vect))
                                                vect)))))))

(def interp-assoc* (reify
                     Stringable
                     (string-list [_]
                       (list "interp-assoc*"))

                     Eq
                     (=* [x y]
                       nothing)

                     ev/Evaluator
                     (ev/eval* [x]
                       (sm/state-maybe x))

                     (ev/apply-fn [_ [m k v hash shift]]
                       (for [new-k (ev/eval-key k)]
                         (assoc* m new-k v hash shift)))))

(def interp-dissoc (reify
                     Stringable
                     (string-list [_]
                       (list "interp-dissoc"))

                     Eq
                     (=* [x y]
                       nothing)

                     ev/Evaluator
                     (ev/eval* [x]
                       (sm/state-maybe x))

                     (ev/apply-fn [_ [m k]]
                       (either (and (instance? HashMap m)
                                    (do
                                      (print-err 'dissoc k)
                                      (maybe (for [new-k (ev/eval-key k)]
                                               (dissoc m new-k)))))
                               (sm/state-maybe (dissoc m k))))))

(def interp-get (reify
                  Stringable
                  (string-list [_]
                    (list "interp-get"))

                  Eq
                  (=* [x y]
                    nothing)

                  ev/Evaluator
                  (ev/eval* [x]
                    (sm/state-maybe x))

                  (ev/apply-fn [_ [m k]]
                    (for [new-k (ev/eval-key k)]
                      (get m new-k)))))

(def interp-get* (reify
                   Stringable
                   (string-list [_]
                     (list "interp-get*"))

                   Eq
                   (=* [x y]
                     nothing)

                   ev/Evaluator
                   (ev/eval* [x]
                     (sm/state-maybe x))

                   (ev/apply-fn [_ [m k v hash shift]]
                     (for [new-k (ev/eval-key k)]
                       (get* m new-k v hash shift)))))

(defn list-reduce-loop [l result? f]
  (either (for [x (first l)
                new-result (map result? (fn [[result s]]
                                          ((ev/apply-fn f (list result x)) s)))]
            (list-reduce-loop (rest l) new-result f))
          result?))

(def interp-list-reduce (reify
                          Stringable
                          (string-list [_]
                            (list "interp-list-reduce"))

                          Eq
                          (=* [x y]
                            nothing)

                          ev/Evaluator
                          (ev/eval* [x]
                            (sm/state-maybe x))

                          (ev/apply-fn [_ [l result f]]
                            (sm/new-sm (fn [s]
                                         (list-reduce-loop l (maybe [result s]) f))))))

(def symbols {'empty-list empty-list
              'empty-vector empty-vector
              'maybe maybe
              'list* list*
              'fn-apply fn-apply
              'nothing nothing
              'reified-type-args reified-type-args
              'reified-get-type reified-get-type
              'new-type-value new-type-value
              'make-value make-value
              'list-count list-count
              'mutate-vect-conj mutate-vect-conj
              'list-concat list-concat
              'add-numbers add-numbers
              'str-malloc str-malloc
              'subtract-numbers subtract-numbers
              'mult-numbers mult-numbers
              'rem rem
              'vect-count vect-count
              'emptyBMI emptyBMI
              'bit-and bit-and
              'bit-or bit-or
              'deliver deliver
              'delivered delivered
              'cons cons
              'sha1-init sha1-init
              'sha1-finalize sha1-finalize
              'address-of address-of
              'identical identical
              'str-append str-append
              'pr* pr*
              'pr-err* pr-err*
              'escape-chars escape-chars
              'char char
              'char-code char-code
              'subs subs
              'symbol symbol
              'sha1-update-type sha1-update-type
              'add-promise-action add-promise-action
              'promise promise
              'future future
              'thread-id thread-id
              'deliver-future deliver-future
              'add-future-action add-future-action

              'Integer (ev/TypeMap {IntegerType #{}})
              'StringBuffer (ev/TypeMap {StringBufferType #{}})
              'SubString (ev/TypeMap {SubStringType #{}})
              'FnArity (ev/TypeMap {FnArityType #{}})
              'Fn (ev/TypeMap {FunctionType #{}})
              'List (ev/TypeMap {ListType #{}})
              'Maybe (ev/TypeMap {MaybeType #{}})
              'Vector (ev/TypeMap {VectorType #{}})
              'Symbol (ev/TypeMap {SymbolType #{}})
              'BitmapIndexedNode (ev/TypeMap {BitmapIndexedType #{}})
              'ArrayNode (ev/TypeMap {ArrayNodeType #{}})
              'HashCollisionNode (ev/TypeMap {HashCollisionNodeType #{}})
              'Promise (ev/TypeMap {PromiseType #{}})
              'Future (ev/TypeMap {FutureType #{}})
              'Agent (ev/TypeMap {AgentType #{}})
              'Opaque (ev/TypeMap {OpaqueType #{}})
              'instance? (ev/ProtoDispatcher (rdr/tag 'instance?) "")
              'type-name (ev/ProtoDispatcher (rdr/tag 'type-name) "")
              'get-type (ev/ProtoDispatcher (rdr/tag 'get-type) "")
              'apply* (ev/ProtoDispatcher (rdr/tag 'apply*) "")
              'list-map interp-list-map
              'maybe-map interp-maybe-map
              'abort interp-abort
              'range range

              'integer-str str
              'add-ints add-numbers
              'int= =*
              'bpre print-err
              })

(def eval-state (ev/EvalState {"" (ev/EvalNamespace {} symbols 
                                                    {'instance? {2
                                                                 {0 instance?}}
                                                     'get-type {1
                                                                {0 get-type}}
                                                     'type-name {1
                                                                 {0 type-name}}
                                                     'filter {2
                                                              {ListType interp-filter-list
                                                               VectorType interp-filter-vect}}
                                                     'assoc* {5
                                                              {BitmapIndexedType interp-assoc*
                                                               HashCollisionNodeType interp-assoc*
                                                               ArrayNodeType interp-assoc*}}
                                                     'dissoc {2
                                                             {BitmapIndexedType interp-dissoc
                                                              HashCollisionNodeType interp-dissoc
                                                              ArrayNodeType interp-dissoc}}
                                                     'get {2
                                                           {BitmapIndexedType interp-get
                                                            HashCollisionNodeType interp-get
                                                            ArrayNodeType interp-get}}
                                                     'get* {5
                                                            {BitmapIndexedType interp-get*
                                                             HashCollisionNodeType interp-get*
                                                             ArrayNodeType interp-get*}}
                                                     'reduce {3
                                                              {ListType interp-list-reduce}}
                                                     'apply* {2
                                                              {0 interp-apply*}}})}
                              CoreTypeCount core-protocols "" 0))

(defn interp-file [state file]
  (println file)
  (or (for [file-in (fio/file-in file)
            asts (ev/parse {'file-name file
                            'line-number 1}
                           (lazy-list file-in))
            [result _] (ev/eval asts (-> state
                                         (assoc-in [.ns file] (ev/EvalNamespace {} {} {}))
                                         (.file-name file)))
            result (last result)]
        (println "\nresult:" result "\n"))
      (maybe (print-err "FAIL!!!\n"))))

(main [[_ & files]]
  (for [file-in (fio/file-in path-to-core)
        asts (ev/parse {'file-name path-to-core
                        'line-number 1}
                       (lazy-list file-in))
        [_ state] (ev/eval asts eval-state)]
    (do
      (map files (partial interp-file state))
      (println 'done))))
