
(deftype Dummy [path])

(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "54d3fc9"))
(add-ns sm (git-dependency "https://github.com/Toccata-Lang/state-maybe.git"
                           "state-maybe.toc"
                           :sha "e843c60"))

(deftype new-sv [invoke-fn]
  (assert (instance? Fn invoke-fn))

  Stringable
  (string-list [x] (comp (list "<new-sv ")
                         (string-list (.invoke-fn x))
                         (list ">")))

  Function
  (invoke [ev s]
    (invoke-fn s))

  Container
  (map [mv f]
    (new-sv (fn [s]
              (map (invoke-fn s) 
                   (fn [[v new-s]]
                     [(f v) new-s])))))

  (wrap [x v]
    (new-sv (fn [s]
              [[v s]])))

  (flat-map [ev f]
    (new-sv (fn [s]
              (flat-map (invoke-fn s)
                        (fn [[v ss]]
                          ((f v) ss))))))

  Composition
  (zero [_] (new-sv (fn [_] []))))

(def state-vect
  (reify
    Type
    (type-name [_]
      "*state-vect wrapper*")

    Function
    (invoke [_ v]
      (new-sv (fn [s]
                [[v s]])))

    Composition
    (zero [_] (new-sv (fn [_] [])))))

(defn any [x y]
  (new-sv (fn [s]
            (let [xs (x s)
                  ys (y s)]
              (comp xs ys)))))

(defprotocol TypeChecker
  (traverse [coll f]
    (assert (instance? Sequence coll))

    ;; traverses a Sequence, applying 'f' to each item
    ;; 'f' must take one value and return a 'state-vect' value
    (assert-result x (instance? new-sv x))
    (new-sv (fn [s]
              [(abort) s]))))

(extend-type Vector
  TypeChecker
  (traverse [coll f]
    (new-sv (fn vect-traverse [s]
              (reduce coll
                      [[[] s]]
                      (fn [branches x]
                        (flat-map branches (fn [[results s]]
                                             (map ((f x) s)
                                                  (fn [[result new-s]]
                                                    [(conj results result) new-s]))))))))))

(extend-type List
  TypeChecker
  (traverse [coll f]
    (new-sv (fn [s]
              (-> coll
                  reverse
                  (reduce [[empty-list s]]
                          (fn [branches x]
                            (flat-map branches (fn [[results s]]
                                                 (map ((f x) s)
                                                      (fn [[result new-s]]
                                                        [(conj results result) new-s])))))))))))

(defn get-subs []
  (new-sv (fn [s]
            [[s s]])))

(defn get-constraint [var]
  (new-sv (fn [s]
            [[(-> (either (get s var) c/top-type)
                  (c/update-var var))
              s]])))

(defn set-constraint [var constraint]
  (new-sv (fn [s]
            [[constraint (-> s
                             (dissoc var)
                             (assoc var constraint))]])))

(defn append-constraint [var constraint file-name line-number]
  (either (and (= constraint c/top-type)
               (maybe (state-vect '_)))
          (for [curr-const (get-constraint var)
                _ (set-constraint var (either (c/compose-constraints file-name line-number
                                                                     (c/update-path constraint file-name line-number)
                                                                     curr-const)
                                              (abort)))]
            '_)))

(defn constrain-contents [var constraint content-vars file-name line-number]
  (for [contents (traverse content-vars get-constraint)
        :let [constraint (-> constraint
                             (c/intersect (c/StaticLengthConstraint (count content-vars)
                                                                    empty-list
                                                                    nothing
                                                                    var))
                             (c/intersect (c/ItemsConstraint contents
                                                             c/coll-of-any
                                                             empty-list
                                                             nothing
                                                             var)))]
        _ (append-constraint var constraint file-name line-number)]
    '_))

(def ListType (inline C Integer "(Value *)&(Integer){IntegerType, -1, ListType};"))
(defn propogate-contents-constraints [list-var content-vars tail-var file-name line-number]
  (for [items-constraints (map (get-constraint list-var)
                               c/extract-items-constraints)
        _ (traverse (zip-lists content-vars items-constraints)
                    (fn [[var const]]
                      (append-constraint var const file-name line-number)))
        _ (append-constraint tail-var (c/TypeConstraint {ListType #{}} empty-list 'List nothing tail-var)
                             file-name line-number)]
    '_))

(defn propogate-constraint [src-var dest-var f file-name line-number]
  (for [arg-c (get-constraint src-var)
        _ (append-constraint dest-var (f arg-c) file-name line-number)]
    '_))
